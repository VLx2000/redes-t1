#!/usr/bin/env python3
import asyncio
from tcp import Servidor
from tcp import Conexao
import re

canais = {}                 # 'Conexao' -> lista_de_canais_pertencentes
apelidos_de_usuario = {}

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    canais_da_conexao = canais.get(conexao)
    
    for canal in canais_da_conexao:
        for conexao_usuario in canais:
            if canal in canais.get(conexao_usuario) and conexao.apelido.upper() != conexao_usuario.apelido.upper():
                resposta_saida = b':%s QUIT :Connection closed\r\n' % (conexao.apelido)
                print(resposta_saida)
                conexao_usuario.enviar(resposta_saida)
    canais.pop(conexao, None)
    apelidos_de_usuario.pop(conexao, None)
    print(conexao, 'conexão fechada')
    conexao.fechar()
    

def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    
    dados = dados_residuais(conexao, dados)        

    # Verificando se há algum \n dentre os dados
    if dados.find(b'\n') != -1:
        
        # Separando as mensagem pelo \n
        dados_separados = dados.split(b'\n')
        
        # Verificando se é uma mensagem de dados incompleta
        if not dados.endswith(b'\n'):
            conexao.residuo = dados_separados[len(dados_separados) - 1]     # atualizando resíduo  
            
            # residuo é retirado, deixando somente as mensagens que estão completas
            dados_separados.pop()                                           
    
        for i in range(0, len(dados_separados)):
            mensagem = dados_separados[i] + b'\n'   # adicionando \n que foi retirado do método .split() à mensagem
            if mensagem.startswith(b'PING'):
                retorna_PONG(conexao, mensagem)
            elif mensagem.startswith(b'NICK'):
                define_nick(conexao, mensagem)
            elif mensagem.startswith(b'PRIVMSG'):
                mensagem_privada(conexao, mensagem)
            elif mensagem.startswith(b'JOIN'):
                entrar_canal(conexao, dados)
            elif mensagem.startswith(b'PART'):
                sair_canal(conexao, dados)
            print(conexao, mensagem)
            

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    canais[conexao] = []
    conexao.registrar_recebedor(dados_recebidos)


def retorna_PONG(conexao, dados):
        codigo_ping = dados.split(b' ', 1)[1] # tentando pegar so o q vem depois de PING
        resposta_pong = b':server PONG server :' + codigo_ping   # formando o PONG
        conexao.enviar(resposta_pong)
        

def dados_residuais(conexao, dados):
    tem_residuo = hasattr(conexao, 'residuo')   # verifica se conexao possui residuo
    if not tem_residuo:
        if dados.endswith(b'\n'):
            return dados                        # se não tem residuo e termina com \n, retorna o dado
        else:
            conexao.residuo = dados             # se não tem residuo e NÃO termina com \n
            return conexao.residuo              # cria e retorna o novo resíduo
    else:
        conexao.residuo += dados
        return conexao.residuo                  # retorna o residuo completo, ou incompleto 


def define_nick(conexao, dados):
    ja_tem_apelido = hasattr(conexao, 'apelido')   # verifica se conexao ja possui apelido
    apelido_a_adicionar = dados.split(b' ', 1)[1].replace(b'\r\n', b'')
    if validar_nome(apelido_a_adicionar):                                  # se o apelido eh valido
        if apelido_a_adicionar.upper() in apelidos_de_usuario.values():    # e n esta no dicionario
            if ja_tem_apelido:
                resposta_nickname_in_use = b':server 433 %s %s :Nickname is already in use\r\n' % (conexao.apelido, apelido_a_adicionar)
            else:
                resposta_nickname_in_use = b':server 433 * %s :Nickname is already in use\r\n' % (apelido_a_adicionar)
            conexao.enviar(resposta_nickname_in_use)
        else:
            if ja_tem_apelido:
                resposta_troca = b':%s NICK %s\r\n' % (conexao.apelido, apelido_a_adicionar)
                conexao.enviar(resposta_troca)
            else:
                resposta_welcome = b':server 001 %s :Welcome\r\n' % (apelido_a_adicionar)
                resposta_file_missing = b':server 422 %s :MOTD File is missing\r\n' % (apelido_a_adicionar)
                conexao.enviar(resposta_welcome)
                conexao.enviar(resposta_file_missing)
            apelidos_de_usuario[conexao] = apelido_a_adicionar.upper()
            conexao.apelido = apelido_a_adicionar
    else:
        resposta_erroneus_nickname = b':server 432 * %s :Erroneous nickname\r\n' % (apelido_a_adicionar)
        conexao.enviar(resposta_erroneus_nickname)            
            

def mensagem_privada(conexao, dados):
    destinatario = dados.split(b' ', 2)[1]      # tentando pegar o q vem depois de PRIVMSG e antes de :
    conteudo = dados.split(b':', 1)[1]          # tentando pegar so o q vem depois de :
    msg_priv = b':%s PRIVMSG %s :%s' % (conexao.apelido, destinatario, conteudo)
    if destinatario.startswith(b'#') and destinatario.lower() in canais.get(conexao):
        for conexao_usuario in canais:
            if destinatario.lower() in canais.get(conexao_usuario) and conexao_usuario.apelido.upper() != conexao.apelido.upper():
                conexao_usuario.enviar(msg_priv)
    elif not destinatario.startswith(b'#'):
        for conexao_usuario in apelidos_de_usuario:
            if conexao_usuario.apelido.upper() == destinatario.upper():
                conexao_usuario.enviar(msg_priv)
            

def entrar_canal(conexao, dados):
    canal_a_entrar = dados.split(b' ', 1)[1].replace(b'\r\n', b'').lower()      # tentando pegar o q vem depois de JOIN
    if canal_a_entrar.startswith(b'#') and validar_nome(canal_a_entrar.replace(b'#',b'')):
        canais[conexao].append(canal_a_entrar)              # usario entra no canal
        msg_canal = b':%s JOIN :%s\r\n' % (conexao.apelido, canal_a_entrar)
        for conexao_usuario in canais:
            if canal_a_entrar in canais.get(conexao_usuario):   # ira mandar msg para pessoas no msm canal
                conexao_usuario.enviar(msg_canal)
    else:
        msg_canal = b':server 403 %s :No such channel' % canal_a_entrar
        conexao.enviar(msg_canal)


def sair_canal(conexao, dados):
    canal_a_sair = dados.split(b' ', 2)[1].replace(b'\r\n', b'').lower()      # tentando pegar o q vem depois de PART
    msg_saida_canal = b':%s PART %s\r\n' % (conexao.apelido, canal_a_sair)
    if canal_a_sair in canais.get(conexao):
        for conexao_usuario in canais:
            if canal_a_sair in canais.get(conexao_usuario):   # ira mandar msg para pessoas no msm canal e ele msm
                conexao_usuario.enviar(msg_saida_canal)
        canais[conexao].pop(canais.get(conexao).index(canal_a_sair))    # removendo canal do dicionario do usuario
    

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()